"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Converter = void 0;
const stream_1 = require("stream");
const Parameters_1 = require("./Parameters");
const ParseRuntime_1 = require("./ParseRuntime");
const bluebird_1 = require("bluebird");
// import { ProcessorFork } from "./ProcessFork";
const ProcessorLocal_1 = require("./ProcessorLocal");
const Result_1 = require("./Result");
class Converter extends stream_1.Transform {
    constructor(param, options = {}) {
        super(options);
        this.options = options;
        this.params = Parameters_1.mergeParams(param);
        this.runtime = ParseRuntime_1.initParseRuntime(this);
        this.result = new Result_1.Result(this);
        // if (this.params.fork) {
        //   this.processor = new ProcessorFork(this);
        // } else {
        this.processor = new ProcessorLocal_1.ProcessorLocal(this);
        // }
        this.once("error", (err) => {
            // console.log("BBB");
            //wait for next cycle to emit the errors.
            setImmediate(() => {
                this.result.processError(err);
                this.emit("done", err);
            });
        });
        this.once("done", () => {
            this.processor.destroy();
        });
        return this;
    }
    preRawData(onRawData) {
        this.runtime.preRawDataHook = onRawData;
        return this;
    }
    preFileLine(onFileLine) {
        this.runtime.preFileLineHook = onFileLine;
        return this;
    }
    subscribe(onNext, onError, onCompleted) {
        this.parseRuntime.subscribe = {
            onNext,
            onError,
            onCompleted
        };
        return this;
    }
    fromFile(filePath, options) {
        const fs = require("fs");
        // var rs = null;
        // this.wrapCallback(cb, function () {
        //   if (rs && rs.destroy) {
        //     rs.destroy();
        //   }
        // });
        fs.exists(filePath, (exist) => {
            if (exist) {
                const rs = fs.createReadStream(filePath, options);
                rs.pipe(this);
            }
            else {
                this.emit('error', new Error("File does not exist. Check to make sure the file path to your csv is correct."));
            }
        });
        return this;
    }
    fromStream(readStream) {
        readStream.pipe(this);
        return this;
    }
    fromString(csvString) {
        const csv = csvString.toString();
        const read = new stream_1.Readable();
        let idx = 0;
        read._read = function (size) {
            if (idx >= csvString.length) {
                this.push(null);
            }
            else {
                const str = csvString.substr(idx, size);
                this.push(str);
                idx += size;
            }
        };
        return this.fromStream(read);
    }
    then(onfulfilled, onrejected) {
        return new bluebird_1.default((resolve, reject) => {
            this.parseRuntime.then = {
                onfulfilled: (value) => {
                    if (onfulfilled) {
                        resolve(onfulfilled(value));
                    }
                    else {
                        resolve(value);
                    }
                },
                onrejected: (err) => {
                    if (onrejected) {
                        resolve(onrejected(err));
                    }
                    else {
                        reject(err);
                    }
                }
            };
        });
    }
    get parseParam() {
        return this.params;
    }
    get parseRuntime() {
        return this.runtime;
    }
    _transform(chunk, encoding, cb) {
        this.processor.process(chunk)
            .then((result) => {
            // console.log(result);
            if (result.length > 0) {
                this.runtime.started = true;
                return this.result.processResult(result);
            }
        })
            .then(() => {
            this.emit("drained");
            cb();
        }, (error) => {
            this.runtime.hasError = true;
            this.runtime.error = error;
            this.emit("error", error);
            cb();
        });
    }
    _flush(cb) {
        this.processor.flush()
            .then((data) => {
            if (data.length > 0) {
                return this.result.processResult(data);
            }
        })
            .then(() => {
            this.processEnd(cb);
        }, (err) => {
            this.emit("error", err);
            cb();
        });
    }
    processEnd(cb) {
        this.result.endProcess();
        this.emit("done");
        cb();
    }
    get parsedLineNumber() {
        return this.runtime.parsedLineNumber;
    }
}
exports.Converter = Converter;
//# sourceMappingURL=data:application/json;base64,