"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeParams = void 0;
function mergeParams(params) {
    const defaultParam = {
        delimiter: ',',
        ignoreColumns: undefined,
        includeColumns: undefined,
        quote: '"',
        trim: true,
        checkType: false,
        ignoreEmpty: false,
        // fork: false,
        noheader: false,
        headers: undefined,
        flatKeys: false,
        maxRowLength: 0,
        checkColumn: false,
        escape: '"',
        colParser: {},
        eol: undefined,
        alwaysSplitAtEOL: false,
        output: "json",
        nullObject: false,
        downstreamFormat: "line",
        needEmitAll: true
    };
    if (!params) {
        params = {};
    }
    for (let key in params) {
        if (params.hasOwnProperty(key)) {
            if (Array.isArray(params[key])) {
                defaultParam[key] = [].concat(params[key]);
            }
            else {
                defaultParam[key] = params[key];
            }
        }
    }
    return defaultParam;
}
exports.mergeParams = mergeParams;
//# sourceMappingURL=data:application/json;base64,